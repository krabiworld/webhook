name: Build and publish

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/build.yml'
      - '**.go'
      - 'go.mod'
      - 'go.sum'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ linux, darwin, windows ]
        arch: [ amd64, arm64 ]
        include:
          - os: linux
            ext: ""
          - os: darwin
            ext: ""
          - os: windows
            ext: .exe

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod

      - name: Build
        run: |
          mkdir dist
          export CGO_ENABLED=0
          export GOOS=${{ matrix.os }}
          export GOARCH=${{ matrix.arch }}
          go build -ldflags="-s -w" -trimpath -o dist/webhook-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} ./cmd/webhook

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: webhook-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*

  docker:
    runs-on: ubuntu-latest

    needs: build

    permissions:
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Download amd64 binary
        uses: actions/download-artifact@v5
        with:
          name: webhook-linux-amd64

      - name: Download arm64 binary
        uses: actions/download-artifact@v5
        with:
          name: webhook-linux-arm64

      - name: Fix permissions
        run: chmod +x ./webhook-linux-amd64 ./webhook-linux-arm64

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Login to Docker Hub
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest

      - name: Create Dockerfile
        run: |
          cat <<'EOF' > ./Dockerfile
          # syntax=docker/dockerfile:1.17.0
          FROM gcr.io/distroless/static-debian12
          ARG TARGETARCH
          COPY ./webhook-linux-${TARGETARCH} /webhook
          CMD ["/webhook"]
          EOF

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  release:
    runs-on: ubuntu-latest

    needs: build

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Bump tag
        id: bump_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          IFS='.' read -r major minor patch <<<"${latest_tag#v}"
          new_tag="v$major.$minor.$((patch + 1))"
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Download all binaries
        uses: actions/download-artifact@v5
        with:
          path: dist

      - name: Release
        uses: softprops/action-gh-release@62c96d0c4e8a889135c1f3a25910db8dbe0e85f7 # v2.3.4
        with:
          files: dist/**
          name: ${{ steps.bump_tag.outputs.new_tag }}
          tag_name: ${{ steps.bump_tag.outputs.new_tag }}
